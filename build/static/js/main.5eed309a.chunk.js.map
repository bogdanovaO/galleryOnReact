{"version":3,"sources":["serviceWorker.js","redux/gallery.jsx","redux/store.js","components/Gallery.jsx","Router.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","initialState","loading","images","error","gallery","state","action","type","reducers","combineReducers","store","createStore","connect","dispatch","setGallery","getImages","props","console","log","length","Router","exact","path","component","Gallery","Component","App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"8LAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBCdFC,EAAe,CACjBC,SAAS,EACTC,OAAQ,GACRC,MAAO,MA+CMC,EA5CG,WAAmC,IAAlCC,EAAiC,uDAAzBL,EAAcM,EAAW,uCAClD,OAAOA,EAAOC,MACZ,IAAK,0BACH,OAAO,2BACFF,GADL,IAEEJ,SAAS,EACTC,OAAQ,KAGZ,IAAK,kBAEH,OAAO,2BACFG,GADL,IAIEH,OAAQI,EAAOJ,SAMnB,IAAK,yBACH,OAAO,2BACFG,GADL,IAEEF,MAAOG,EAAOH,QAGlB,QACE,OAAOE,ICjCTG,EAAWC,YAAgB,CAC7BL,QAASA,IAUIM,EAJHC,YAAYH,G,wGC2CTI,eAdO,SAACP,GACrB,MAAO,CACLH,OAAQG,EAAMD,QAAQF,WAID,SAACW,GACxB,MAAO,CACLC,WAAY,SAACZ,GAEXW,EFLmB,SAACX,GAAD,MAAa,CACpCK,KAAM,kBAAmBL,UEIZa,CAAUb,QAIVU,EAjDD,SAACI,GACbC,QAAQC,IAAIF,EAAMF,YAIdE,EAAMG,OAAS,GACjBH,EAAMF,WAAW,CAAC,CAAC,GAAK,IAAI,IAAM,wCAAwC,CAAC,GAAK,IAAI,IAAM,wCAAwC,CAAC,GAAK,IAAI,IAAM,0CASpJ,IAAMV,EAAUY,EAAMd,OAKtB,OAJAe,QAAQC,IAAId,GAIL,8ECpBYgB,E,uKAGjB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAYC,S,GALNC,aCSrBC,MAVf,SAAaV,GAEX,OACE,kBAAC,IAAD,KACA,kBAAC,EAAD,QCAHW,IAASC,OACN,kBAAC,IAAD,CAAUlB,MAAOA,GACf,kBAAC,EAAD,OAEFmB,SAASC,eAAe,SNsHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAlC,GACLc,QAAQd,MAAMA,EAAMmC,c","file":"static/js/main.5eed309a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const GET_IMAGES_DATA_STARTED = 'GET_IMAGES_DATA_STARTED'\nconst GET_IMAGES_DATA = \"GET_IMAGES_DATA\"\nconst GET_IMAGES_DATA_FAILED = 'GET_IMAGES_DATA_FAILED'\n\nlet initialState = {\n  loading: true,\n  images: [],\n  error: null\n}\n\nconst gallery  =  (state = initialState, action) => {\n  switch(action.type) {\n    case 'GET_IMAGES_DATA_STARTED': {\n      return {\n        ...state,\n        loading: true,\n        images: []\n      };\n    }\n    case 'GET_IMAGES_DATA': {\n\n      return {\n        ...state,\n        // loading: false,\n        // error: null,\n        images: action.images\n\n      };\n      \n    }\n\n    case 'GET_IMAGES_DATA_FAILED': {\n      return {\n        ...state,\n        error: action.error\n      };\n    }\n    default:\n      return state;\n  }\n}\n\n\nexport const getImagesStarted = (images) => ({\n  type: 'GET_IMAGES_DATA_STARTED', images\n});\nexport const getImages = (images) => ({\n  type: 'GET_IMAGES_DATA', images\n});\nexport const getImagesFailed = (error) => ({\n  type: 'GET_IMAGES_DATA_FAILED', error\n});\n\n\nexport default gallery;","import { createStore, combineReducers } from \"redux\";\n\n\nimport gallery from './gallery';\n\nlet reducers = combineReducers({\n  gallery: gallery\n});\n//объект у которого есть 3 свойства, каждое свойство является методом\n//воспринимай как стейт\n\n\nlet store = createStore(reducers)\n\n//createStore автоматически создает внутри себя state у которого есть свойства прописанные выше\n\nexport default store;\n\n\n\n","import React from 'react';\nimport * as axios from 'axios';\n//jsx не работает без реакта \nimport {connect} from 'react-redux'\nimport {getImages} from '../redux/gallery.jsx'\n\nlet Gallery = (props) => {\n  console.log(props.setGallery)\n\n\n\n  if (props.length < 3) {\n    props.setGallery([{\"id\":237,\"url\":\"https://picsum.photos/id/237/300/200\"},{\"id\":238,\"url\":\"https://picsum.photos/id/238/300/200\"},{\"id\":239,\"url\":\"https://picsum.photos/id/239/300/200\"}])\n    debugger\n  //   axios.get(\"https://boiling-refuge-66454.herokuapp.com/images\").then( res => {\n  //     if(res.data.result) {\n  //       props.getImages(res.data.result)\n  //     } \n  //   })\n  }\n\n  const gallery = props.images\n  console.log(gallery)\n\n\n\n  return <div>\n    привует\n    {/* {gallery} */}\n{/* \n    {\n\n      props.images.map( item => <div key={item.id}>\n\n        <img src={item.url}></img>\n\n      </div> )\n    } */}\n  </div>\n}\n\nlet mapStateToProps = (state) => {\n  return {\n    images: state.gallery.images\n  }\n}\n\nlet mapDispatchToProps = (dispatch) => {\n  return {\n    setGallery: (images) => {\n\n      dispatch(getImages(images))\n    }\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Gallery);","import { Switch, Route } from 'react-router-dom';\n\n// import GalleryDetails from './GalleryDetails.jsx'\nimport React, { Component }  from 'react';\nimport Gallery from './components/Gallery.jsx'\n\nexport default class Router extends Component {\n  render() {\n\n    return(\n      <Switch>\n        <Route exact path='/' component={ Gallery}/>\n        {/* <Route exact path='/:id' component={ GalleryDetails }/> */}\n      </Switch>\n    )\n\n\n  }\n}","import React from 'react';\nimport './App.css';\n\nimport { BrowserRouter } from 'react-router-dom';\nimport Router from './Router.js'\nfunction App(props) {\n\n  return (\n    <BrowserRouter>\n    <Router/>\n    </BrowserRouter>\n\n  );\n}\n\nexport default App;\n","import './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store.js';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from 'react-redux';\n\n ReactDOM.render(\n    <Provider store={store}>\n      <App/>\n    </Provider>,\n    document.getElementById('root')\n  );\n\n\n\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}