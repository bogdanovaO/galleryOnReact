{"version":3,"sources":["serviceWorker.js","redux/gallery.jsx","redux/store.js","components/GalleryDetails.jsx","components/Dropdown.jsx","components/Gallery.jsx","Router.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","initialState","images","imageUrl","imageComments","newPostText","gallery","state","action","type","comment","id","text","date","reducers","combineReducers","store","createStore","GalleryDetails","props","axios","url","then","res","data","setGalleryItem","comments","alert","catch","error","galleryItem","this","galleryComments","newPost","React","createRef","updateComment","addComment","console","log","className","src","alt","Form","Control","ref","onChange","current","value","rows","Button","onClick","map","item","Component","connect","dispatch","getImagesItem","updateNewPostText","addNewPostText","viewData","name","Dropdown","showMenu","currentStyle","bind","closeMenu","event","preventDefault","setState","document","addEventListener","removeEventListener","gridId","viewName","view","key","handleClick","Gallery","gridStyle","setGridStyle","setGallery","Object","values","to","getImages","Router","exact","path","component","App","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"mNAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4BCbFC,EAAe,CACjBC,OAAQ,GACRC,SAAU,GACVC,cAAe,GACfC,YAAa,IAwDAC,EArDG,WAAmC,IAAlCC,EAAiC,uDAAzBN,EAAcO,EAAW,uCAClD,OAAOA,EAAOC,MACZ,IAAK,kBACH,OAAO,2BACFF,GADL,IAEEL,OAAQM,EAAON,SAGnB,IAAK,kBACH,OAAO,2BACFK,GADL,IAEEJ,SAAUK,EAAOL,SACjBC,cAAeI,EAAOJ,gBAG1B,IAAK,uBACH,OAAO,2BAEFG,GAFL,IAGEF,YAAaG,EAAOE,UAGxB,IAAK,qBACH,IAAIA,EAAW,CACbC,GAAI,IACJC,KAAML,EAAMF,YACZQ,KAAM,eAER,OAAO,2BACFN,GADL,IAEEH,cAAc,GAAD,mBAAMG,EAAMH,eAAZ,CAA2BM,IACxCL,YAAa,KAGjB,QACE,OAAOE,IC5CTO,EAAWC,YAAgB,CAC7BT,QAASA,IAKIU,EAFHC,YAAYH,G,wHCClBI,G,wDACJ,WAAYC,GAAQ,IAAD,6BACjB,cAAMA,GACNC,MACO,oDAAsD,EAAKD,MAAMnB,MAAMqB,KAC3EC,MAAK,SAAAC,GACAA,EAAIC,KACNL,EAAMM,eAAeF,EAAIC,KAAKH,IAAKE,EAAIC,KAAKE,UAE5CC,MAAM,YAGTC,OAAM,SAAAC,GAAK,OAAIF,MAAME,MAXP,E,qDAcjB,IAAMC,EAAcC,KAAKZ,MAAMhB,SACzB6B,EAAkBD,KAAKZ,MAAMf,cAC/BC,EAAc0B,KAAKZ,MAAMd,YACzB4B,EAAUC,IAAMC,YACdC,EAAgBL,KAAKZ,MAAMiB,cAM7BC,EAAaN,KAAKZ,MAAMkB,WAE5B,OADAC,QAAQC,IAAIlC,GAEV,yBAAKmC,UAAU,mBAEX,yBAAKA,UAAU,uBAAuBC,IAAKX,EAAaY,IAAI,QAC5D,yBAAKF,UAAU,QACf,kBAACG,EAAA,EAAKC,QAAN,CACEJ,UAAU,cACVK,IAAKZ,EACLa,SAfS,WACf,IAAIpC,EAAUuB,EAAQc,QAAQC,MAC9BZ,EAAc1B,IAcRsC,MAAOjB,KAAKZ,MAAMd,YAClB4C,KAAK,MACP,kBAACC,EAAA,EAAD,CACEV,UAAU,eACVW,QAASd,GAFX,2DAMA,yBAAKG,UAAU,YAEbR,EAAgBoB,KAAI,SAAAC,GAAI,OACtB,yBAAKb,UAAU,kBAAkBa,EAAKzC,e,GA/CvB0C,cA+EdC,eArBS,SAAChD,GACvB,MAAO,CACLJ,SAAUI,EAAMD,QAAQH,SACxBC,cAAeG,EAAMD,QAAQF,cAC7BC,YAAaE,EAAMD,QAAQD,gBAIN,SAACmD,GACxB,MAAO,CACL/B,eAAgB,SAACtB,EAAUC,GACzBoD,EFtBuB,SAACrD,EAAUC,GAAX,MAA8B,CACzDK,KAAM,kBAAmBN,WAAUC,iBEqBtBqD,CAActD,EAAUC,KAEnCgC,cAAe,SAAC1B,GACd8C,EFtB2B,SAAC9C,GAAD,MAAc,CAC7CD,KAAM,uBAAwBC,WEqBjBgD,CAAkBhD,KAE7B2B,WAAY,SAAC3B,GACX8C,EFtBwB,SAAC9C,GAAD,MAAc,CAC1CD,KAAM,qBAAsBC,WEqBfiD,CAAejD,QAIf6C,CAA6CrC,G,QCpFtD0C,EAAW,CACf,CAAEC,KAAM,kFAAkBlD,GAAI,GAC9B,CAAEkD,KAAM,kFAAkBlD,GAAI,GAC9B,CAAEkD,KAAM,kFAAkBlD,GAAI,IAGXmD,E,kDACnB,WAAY3C,GAAQ,IAAD,8BACjB,cAAMA,IACDZ,MAAQ,CACXwD,UAAU,EACVC,aAAc,OAEhB,EAAKD,SAAW,EAAKA,SAASE,KAAd,gBAChB,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBAPA,E,qDASVE,GAAQ,IAAD,OACdA,EAAMC,iBACNrC,KAAKsC,SAAS,CAAEN,UAAU,IAAQ,WAChCO,SAASC,iBAAiB,QAAS,EAAKL,gB,kCAI/B,IAAD,OACVnC,KAAKsC,SAAS,CAAEN,UAAU,IAAS,WACjCO,SAASE,oBAAoB,QAAS,EAAKN,gB,kCAInCO,EAAQC,GAClB3C,KAAKZ,MAAMsD,OAAOA,GAClB1C,KAAKsC,SAAS,CAAEL,aAAcU,M,+BAGtB,IAAD,OACP,OACE,yBAAKlC,UAAU,YACb,yBAAKA,UAAU,kBAAkBW,QAASpB,KAAKgC,UAA/C,8HAEEhC,KAAKxB,MAAMwD,SAET,yBAAKvB,UAAU,kBAEboB,EAASR,KAAI,SAAAuB,GACX,OAAO,4BAAQnC,UAAU,mBAAmBoC,IAAKD,EAAKhE,GAAIwC,QAAS,kBAAM,EAAK0B,YAAYF,EAAKhE,GAAIgE,EAAKd,QAAQc,EAAKd,UAMzH,U,GA5C0BP,aCAhCwB,E,kDACJ,WAAY3D,GAAQ,IAAD,8BACjB,cAAMA,IAEDZ,MAAQ,CACXwE,UAAW,uBAGb,EAAKC,aAAe,EAAKA,aAAaf,KAAlB,gBACpB7C,MACO,qDACJE,MAAK,SAAAC,GACAA,EAAIC,KACN,EAAKL,MAAM8D,WAAW1D,EAAIC,MAE1BG,MAAM,YAGTC,OAAM,SAAAC,GAAK,OAAIF,MAAME,MAjBP,E,yDAmBN4C,GACX,OAAQA,GACN,KAAK,EACH1C,KAAKsC,SAAS,CAACU,UAAW,wBAC1B,MACF,KAAK,EACHhD,KAAKsC,SAAS,CAACU,UAAW,2BAC1B,MACF,KAAK,EACHhD,KAAKsC,SAAS,CAACU,UAAW,0BAC1B,MACF,QACE,U,+BAKN,IAAMzE,EAAU4E,OAAOC,OAAOpD,KAAKZ,MAAMjB,QAEzC,OACE,oCACA,kBAAC,EAAD,CAAUuE,OAAQ1C,KAAKiD,eACvB,yBAAKxC,UAAWT,KAAKxB,MAAMwE,WAEvBzE,EAAQ8C,KAAI,SAAAC,GAAI,OACd,kBAAC,IAAD,CAAMuB,IAAKvB,EAAK1C,GAAIyE,GAAE,WAAM/B,EAAK1C,KAC/B,yBAAM6B,UAAU,cAAcE,IAAI,YAAYD,IAAKY,EAAKhC,gB,GA9C9CiC,aAqEPC,eAbO,SAAChD,GACrB,MAAO,CACLL,OAAQK,EAAMD,QAAQJ,WAID,SAACsD,GACxB,MAAO,CACLyB,WAAY,SAAC/E,GACXsD,EJtBmB,SAACtD,GAAD,MAAa,CACpCO,KAAM,kBAAmBP,UIqBZmF,CAAUnF,QAIVqD,CAA6CuB,GCxEvCQ,E,uKAGjB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAYX,IAClC,kBAAC,IAAD,CAAOS,OAAK,EAACC,KAAK,YAAYC,UAAYvE,S,GANdoC,aCOrBoC,MARf,SAAavE,GACX,OACE,kBAAC,IAAD,KACA,kBAAC,EAAD,QCCHwE,IAASC,OACR,kBAAC,IAAD,CAAU5E,MAAOA,GAChB,kBAAC,EAAD,OAGCsD,SAASuB,eAAe,SRqHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1E,MAAK,SAAA2E,GACJA,EAAaC,gBAEdtE,OAAM,SAAAC,GACLS,QAAQT,MAAMA,EAAMsE,c","file":"static/js/main.a50cb973.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n\n","const GET_IMAGES_DATA = \"GET_IMAGES_DATA\"\nconst GET_IMAGES_ITEM = 'GET_IMAGES_ITEM'\nconst UPDATE_NEW_POST_TEXT = 'UPDATE_NEW_POST_TEXT'\nconst ADD__NEW_POST_TEXT = 'ADD__NEW_POST_TEXT'\n\nlet initialState = {\n  images: [],\n  imageUrl: [],\n  imageComments: [],\n  newPostText: ''\n}\n\nconst gallery  =  (state = initialState, action) => {\n  switch(action.type) {\n    case 'GET_IMAGES_DATA': {\n      return {\n        ...state,\n        images: action.images\n      };\n    }\n    case 'GET_IMAGES_ITEM': {\n      return {\n        ...state,\n        imageUrl: action.imageUrl,\n        imageComments: action.imageComments\n      };\n    }\n    case 'UPDATE_NEW_POST_TEXT': {\n      return {\n  \n        ...state,\n        newPostText: action.comment\n      };\n    }\n    case 'ADD__NEW_POST_TEXT': {\n      let comment  = {\n        id: 156, \n        text: state.newPostText, \n        date: 1578054737927\n      }\n      return {\n        ...state,\n        imageComments: [...state.imageComments, comment],\n        newPostText: ''\n      };\n    }\n    default:\n      return state;\n  }\n}\n\n\nexport const getImages = (images) => ({\n  type: 'GET_IMAGES_DATA', images\n});\nexport const getImagesItem = (imageUrl, imageComments) => ({\n  type: 'GET_IMAGES_ITEM', imageUrl, imageComments\n});\nexport const updateNewPostText = (comment) => ({\n  type: 'UPDATE_NEW_POST_TEXT', comment\n});\nexport const addNewPostText = (comment) => ({\n  type: 'ADD__NEW_POST_TEXT', comment\n});\n\nexport default gallery;","import { createStore, combineReducers } from \"redux\";\nimport gallery from './gallery';\n\nlet reducers = combineReducers({\n  gallery: gallery\n});\n\nlet store = createStore(reducers)\n\nexport default store;\n\n\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as axios from 'axios';\nimport { getImagesItem, updateNewPostText, addNewPostText } from '../redux/gallery.jsx';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport './Gallery.sass'\n\nclass GalleryDetails extends Component {\n  constructor(props) {\n    super(props)\n    axios\n      .get('https://boiling-refuge-66454.herokuapp.com/images' + this.props.match.url)\n      .then(res => {\n        if (res.data) {\n          props.setGalleryItem(res.data.url, res.data.comments)\n        } else {\n          alert('error')\n        }\n      })\n      .catch(error => alert(error));\n  }\n  render() {\n    const galleryItem = this.props.imageUrl\n    const galleryComments = this.props.imageComments\n    let newPostText = this.props.newPostText\n    let newPost = React.createRef();\n    const updateComment = this.props.updateComment\n    let changePost = () => {\n      let comment = newPost.current.value;\n      updateComment(comment)\n    }\n\n    let addComment = this.props.addComment\n    console.log(newPostText)\n    return (\n      <div className='detailContainer'>\n        {/* <div className='galleryDetail'> */}\n          <img className='detailContainer__img' src={galleryItem} alt='img' />\n          <div className='form'>\n          <Form.Control\n            className='form__input'\n            ref={newPost}\n            onChange={changePost}\n            value={this.props.newPostText}\n            rows=\"3\" />\n          <Button\n            className='form__button'\n            onClick={addComment}>\n            отправить\n        </Button>\n          </div>\n          <div className='comments'>\n          {\n            galleryComments.map(item => (\n              <div className='comments__item'>{item.text}</div>\n            ))\n          }\n          </div>\n        </div>\n\n\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    imageUrl: state.gallery.imageUrl,\n    imageComments: state.gallery.imageComments,\n    newPostText: state.gallery.newPostText\n  };\n};\n\nlet mapDispatchToProps = (dispatch) => {\n  return {\n    setGalleryItem: (imageUrl, imageComments) => {\n      dispatch(getImagesItem(imageUrl, imageComments))\n    },\n    updateComment: (comment) => {\n      dispatch(updateNewPostText(comment))\n    },\n    addComment: (comment) => {\n      dispatch(addNewPostText(comment))\n    }\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(GalleryDetails);\n","import React, { Component } from 'react'\nimport './Gallery.sass'\n\nconst viewData = [\n  { name: 'Большая плитка', id: 1 },\n  { name: 'Средняя плитка', id: 2 },\n  { name: 'Средний список', id: 3 }\n];\n\nexport default class Dropdown extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      showMenu: false,\n      currentStyle: 'BIG'\n    }\n    this.showMenu = this.showMenu.bind(this);\n    this.closeMenu = this.closeMenu.bind(this);\n  }\n  showMenu(event) {\n    event.preventDefault();\n    this.setState({ showMenu: true }, () => {\n      document.addEventListener('click', this.closeMenu);\n    });\n  }\n\n  closeMenu() {\n    this.setState({ showMenu: false }, () => {\n      document.removeEventListener('click', this.closeMenu);\n    });\n  }\n\n  handleClick(gridId, viewName) {\n    this.props.gridId(gridId);\n    this.setState({ currentStyle: viewName });\n  }\n\n  render() {\n    return (\n      <div className='dropdown'>\n        <div className='dropdown__title' onClick={this.showMenu}>Выберите размер плитки</div>\n        {\n          this.state.showMenu \n          ? (\n            <div className='dropdown__menu'>\n            {\n              viewData.map(view => {\n                return <button className='dropdown__button' key={view.id} onClick={() => this.handleClick(view.id, view.name)}>{view.name}</button>;\n              })\n            }\n            </div>)\n          :\n          (\n            null\n          )\n        }\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport * as axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport { getImages } from '../redux/gallery.jsx'\nimport Dropdown from './Dropdown.jsx'\nimport './Gallery.sass'\n\n\nclass Gallery extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      gridStyle: 'bigGalleryContainer'\n\n    }\n    this.setGridStyle = this.setGridStyle.bind(this);\n    axios\n      .get('https://boiling-refuge-66454.herokuapp.com/images')\n      .then(res => {\n        if (res.data) {\n          this.props.setGallery(res.data)\n        } else {\n          alert('error')\n        }\n      })\n      .catch(error => alert(error));\n  }\n  setGridStyle(gridId) {\n    switch (gridId) {\n      case 1:\n        this.setState({gridStyle: 'bigGalleryContainer'});\n        break;\n      case 2:\n        this.setState({gridStyle: 'middleGalleryContainer'});\n        break;\n      case 3:\n        this.setState({gridStyle: 'smallGalleryContainer'});\n        break;\n      default:\n        return;\n    }\n  }\n\nrender() {\n  const gallery = Object.values(this.props.images)\n\n  return (\n    <>\n    <Dropdown gridId={this.setGridStyle}/>\n    <div className={this.state.gridStyle}>\n      {\n        gallery.map(item => (\n          <Link key={item.id} to={`/${item.id}`}>\n            <img  className='galleryItem' alt='allImages' src={item.url}></img>\n          </Link>\n        ))\n      }\n    </div>\n    </>\n    )\n}\n}\n\nlet mapStateToProps = (state) => {\n  return {\n    images: state.gallery.images\n  }\n}\n\nlet mapDispatchToProps = (dispatch) => {\n  return {\n    setGallery: (images) => {\n      dispatch(getImages(images))\n    }\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Gallery);\n","import { Switch, Route } from 'react-router-dom';\n\nimport GalleryDetails from './components/GalleryDetails.jsx'\nimport React, { Component }  from 'react';\nimport Gallery from './components/Gallery.jsx'\n\nexport default class Router extends Component {\n  render() {\n\n    return(\n      <Switch>\n        <Route exact path='/' component={ Gallery}/>\n        <Route exact path='/:imageId' component={ GalleryDetails }/>\n      </Switch>\n    )\n\n\n  }\n}","import React from 'react';\nimport './App.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport Router from './Router.js'\n\nfunction App(props) {\n  return (\n    <BrowserRouter>\n    <Router/>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store.js';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from 'react-redux';\n\n ReactDOM.render(\n  <Provider store={store}>\n   <App/>\n </Provider>\n,\n    document.getElementById('root')\n  );\n\nserviceWorker.unregister();\n"],"sourceRoot":""}